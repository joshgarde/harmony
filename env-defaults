# Default Harmony Environment Variables - do not edit this file locally.
# Override any of the values here by setting a value in a .env file at the
# root level of this repository. All of the default values in this file
# should work for developing locally on Mac OS X.

###########################################################################
#                             No defaults possible                        #
#                                                                         #
# Parameters must be overridden, no default value can be provided         #
###########################################################################

# Random string used to sign cookies that should be consistent between
# load-balanced instances of Harmony.  You can use
# `hexdump -n 128 -e '"%08x"' /dev/random`
# to generate a 128 byte random hex string (256 chars)
COOKIE_SECRET=

# Random string used for encrypting and decrypting Earthdata login tokens
# sent to backend services
# `hexdump -n 32 -e '"%08x"' /dev/random`
# to generate a 32 character random string
SHARED_SECRET_KEY=

# See the "OAuth 2 (Earthdata Login)" section below for a description
OAUTH_CLIENT_ID=
OAUTH_UID=
OAUTH_PASSWORD=

###########################################################################
#                             General Config                              #
#                                                                         #
# Settings to control how Harmony behaves                                 #
###########################################################################

# The port on which to run the Harmony frontend
PORT=3000

# The port on which to run the Harmony backend that receives service
# callbacks
BACKEND_PORT=3001

# The base URL for the service callbacks. This needs to be accessible from
# wherever the service is run. The Harmony CI/CD scripts sets this to the
# backend load balancer when running on AWS. The default is set for
# running Harmony in Kubernetes.
CALLBACK_URL_ROOT=http://harmony:3001
# When running locally on a Mac or Linux (not in Kubernetes), use the appropriate value below.
# Mac OS X:
# CALLBACK_URL_ROOT=http://host.docker.internal:3001
# Linux:
# CALLBACK_URL_ROOT=http://localhost:3001

# The CMR Endpoint to use (e.g. URL for local, SIT, UAT, or production)
CMR_ENDPOINT=https://cmr.uat.earthdata.nasa.gov

# For testing: Whether to use Localstack instead of AWS S3.  Options are "true" or "false".
USE_LOCALSTACK=true

# Hostname for harmony to use to connect to Localstack
LOCALSTACK_HOST=localstack

# Hostname for K8S pods to connect to Localstack
LOCALSTACK_K8S_HOST=localstack

# If set to true, only include EDL cookies if the request is made via https.
USE_HTTPS=false

# Whether to run example service endpoints under /example.  Useful for
# testing HTTP backends without actual service calls.  See example/http-service.js
EXAMPLE_SERVICES=true

# Identifier so backends know which Harmony client submitted the request
CLIENT_ID=harmony-local

# When set to true log messages are logged as a text string instead of the default
# JSON format. Useful when running harmony locally and viewing logs via a terminal.
TEXT_LOGGER=true

# When set to true log all database queries performed by knex
DEBUG_KNEX=false

# Log level (error, warn, info, debug)
LOG_LEVEL=debug

# Default number of results in a page
DEFAULT_RESULT_PAGE_SIZE=2000

# Default number of jobs listed in a page
DEFAULT_JOB_LIST_PAGE_SIZE=10

# Maximum number of results in a page
MAX_PAGE_SIZE=10000

# Number of granules allowed for a synchronous request. When the request exceeds
# this number it will be processed asynchronously. If a service provides a
# value in services.yml for maximum_sync_granules it will override this value.
MAX_SYNCHRONOUS_GRANULES=1

# Number of granules submitted to a backend service within a single request. If a request
# contains more granules, the request will result in multiple calls to the backend service
# with DEFAULT_BATCH_SIZE granules sent in each call. If a service provides a value
# in services.yml for maximum_async_granules it will override this value.
DEFAULT_BATCH_SIZE=2000

# The maximum allowed granules in any request synchronous or asynchronous. If a service
# attempts to configure a value greater than this limit for either maximum_async_granules
# or maximum_async_granules we will override the configuration to limit to this value.
MAX_GRANULE_LIMIT=350

# String to identify the type of environment.  Options:
#  - "development" for local development.
#  - "production" for deployments with a separate postgres server (SIT, UAT, Production).
#  - "test" for unit / integration tests
# This is a conventional identifier to switch application behavior but is
# currently only used to determine which database connection to use in
# db/knexfile.js
NODE_ENV=development

# Connection string to use to connect to the database.  Used for
# NODE_ENV="production" databases.  For development and test, this is
# ignored, using a sqlite3 file instead
DATABASE_URL=

# A bucket with brief lifecycle where temporary uploads (shapefiles) are stored while
# requests are in flight
UPLOAD_BUCKET=local-upload-bucket

# An IAM role that allows access to a bucket and prefix where outputs for asynchronous
# requests are stored by backend services.
SAME_REGION_ACCESS_ROLE=same-region-access-role

# The CMR concept ID for the group whose users can access the admin interface
ADMIN_GROUP_ID=AG1222736883-EEDTEST

# The URL to use for interacting with Argo
ARGO_URL=http://argo-server:2746

# The time (in seconds) between invocations of the job reaper service
JOB_REAPER_PERIOD_SEC=360

# Jobs older than this many minutes that are running are checked by the job reaper
REAPABLE_JOB_AGE_MINUTES=60

# The time (in seconds) between invocations of the work reaper service
WORK_REAPER_PERIOD_SEC=360

# WorkItems and WorkflowSteps (in a terminal state) older than this many minutes are checked by the work reaper
REAPABLE_WORK_AGE_MINUTES=1440

# The number of seconds before timing out a single step (pod) in an Argo workflow
DEFAULT_ARGO_POD_TIMEOUT_SECS=14400

# The number of ms to wait between polling to check whether a synchronous request completed
SYNC_REQUEST_POLL_INTERVAL_MS=100

# Local development: Use the following to set the Kubernetes context used by start scripts
# minikube users should set it to "minikube"
KUBE_CONTEXT=docker-desktop

###########################################################################
#                             Service Config                              #
#                                                                         #
# Variables defined in config/services.yml that get passed to backend     #
# services on invocation                                                  #
###########################################################################

# Docker image:tag names for services referenced in config/services.yml.
# Set to an image:tag available locally, on ECR, on DockerHub, etc.
#
# For Argo services, the image's pull policy variable controls the
# Kubernetes imagePullPolicy used for that service in a given
# environment. See the Kubernetes Container Images documentation for
# the possible imagePullPolicy values and their behavior:
#
#   https://kubernetes.io/docs/concepts/configuration/overview/#container-images
#
# Summary:
#
# Always:       Pulls new image (if available) on each container startup
# IfNotPresent: Pulls new image if it is not available locally
# Never:        Image is assumed to exist locally, it is never pulled
#
# Recommended pull policies by environment:
#
# Environment    Pull Policy    Behavior
# -----------------------------------------------------------------------
# Local          IfNotPresent   The image:tag will be pulled if it doesn't
#                               exist locally. If it has been pulled
#                               manually, it will always use that image.
#                               If it is built locally, it will use that
#                               image.
# Sandbox        Always         The image:tag will be pulled each time a
#                               workflow runs which needs the image. Note
#                               that K8S will check the image hash to determine
#                               if an image:tag has been changed, and only
#                               pull it if so.
# SIT            Always         The image:tag is pulled on each workflow run.
# UAT            Always         The image:tag is pulled on each workflow run.
# PROD           IfNotPresent   The image:tag is only pulled if it does not
#                               exist locally.
#
# For Local development, 'IfNotPresent' is recommended since this will use
# the new version of a local image that you are working on locally, while
# pulling any other images not currently under development.

# The image pull policy to use for any images which do not have an explicit
# pull policy configured. See the above table for the recommend value to use
# for the given environment.
DEFAULT_IMAGE_PULL_POLICY='IfNotPresent'
DEFAULT_PARALLELISM=2

ASF_GDAL_SUBSETTER_IMAGE=asfdataservices/gdal-subsetter:latest
ASF_GDAL_SUBSETTER_IMAGE_PULL_POLICY='IfNotPresent'
ASF_GDAL_SUBSETTER_PARALLELISM=2

HARMONY_SERVICE_EXAMPLE_IMAGE=harmonyservices/service-example:latest
HARMONY_SERVICE_EXAMPLE_IMAGE_PULL_POLICY='IfNotPresent'
HARMONY_SERVICE_EXAMPLE_PARALLELISM=2

HARMONY_NETCDF_TO_ZARR_IMAGE=harmonyservices/netcdf-to-zarr:latest
HARMONY_NETCDF_TO_ZARR_IMAGE_PULL_POLICY='IfNotPresent'
HARMONY_NETCDF_TO_ZARR_PARALLELISM=2

SWOT_REPROJECT_IMAGE=sds/swot-reproject:latest
SWOT_REPROJECT_IMAGE_PULL_POLICY='IfNotPresent'
SWOT_REPROJECT_PARALLELISM=2

VAR_SUBSETTER_IMAGE=sds/variable-subsetter:latest
VAR_SUBSETTER_IMAGE_PULL_POLICY='IfNotPresent'
VAR_SUBSETTER_PARALLELISM=2

SDS_MASKFILL_IMAGE=sds/maskfill-harmony
SDS_MASKFILL_IMAGE_PULL_POLICY='IfNotPresent'
SDS_MASKFILL_PARALLELISM=2

PODAAC_L2_SUBSETTER_IMAGE=podaac/podaac-cloud/podaac-subsetter:latest
PODAAC_L2_SUBSETTER_IMAGE_PULL_POLICY='IfNotPresent'
PODAAC_L2_SUBSETTER_PARALLELISM=2

PODAAC_PS3_IMAGE=podaac/podaac-cloud/podaac-shapefile-subsetter:latest
PODAAC_PS3_IMAGE_PULL_POLICY='IfNotPresent'
PODAAC_PS3_PARALLELISM=2

PODAAC_NETCDF_CONVERTER_IMAGE=podaac/podaac-cloud/podaac-netcdf-converter:latest
PODAAC_NETCDF_CONVERTER_IMAGE_PULL_POLICY='IfNotPresent'
PODAAC_NETCDF_CONVERTER_PARALLELISM=2

CMR_GRANULE_LOCATOR_IMAGE=harmonyservices/query-cmr:latest
CMR_GRANULE_LOCATOR_IMAGE_PULL_POLICY='IfNotPresent'

# page size to use with CMR calls
CMR_MAX_PAGE_SIZE=2000

# Prefix before "harmonyservices/task-name" for built-in tasks like query-cmr, e.g. an ECR location
# If not blank, it should end in a slash if there is a slash before "harmony"
BUILT_IN_TASK_PREFIX=
# Version to use for all built-in tasks.  "latest" (local / sandbox), "sit", "uat", or "prod"
BUILT_IN_TASK_VERSION=latest

# AWS region where harmony is deployed, irrelevant for local development
AWS_DEFAULT_REGION=us-west-2

# The object store used for storing shapefiles. Only S3 is supported currently.
OBJECT_STORE_TYPE=s3

# The bucket where final service output data will be staged
# Default: A bucket created for use in localstack
STAGING_BUCKET=local-staging-bucket

# The bucket where intermediate service artifacts will be staged
# Default: A bucket created for use in localstack
ARTIFACT_BUCKET=local-artifact-bucket

# The DNS entry to use for the host exposing the Harmony back end API for callbacks. This
# default is appropriate for when Harmony is running in Kubernetes.
BACKEND_HOST=harmony
#  For local development outside of Kubernetes:
# Mac OS X:
# BACKEND_HOST=host.docker.internal
# Linux:
# BACKEND_HOST=localhost

# Maximum number of non-file fields to accept when providing a shapefile to harmony
MAX_POST_FIELDS=100

# Maximum size (in bytes) for shapefiles
MAX_POST_FILE_SIZE=2000000000

# Maximum number of multipart parts to accept when providing a shapefile
MAX_POST_FILE_PARTS=100

# The location on the file system to save the work items that will be mounted into the
# containers for any services to read and save STAC catalogs.
HOST_VOLUME_PATH=

#############################################################################
#                        OAuth 2 (Earthdata Login)                          #
#                                                                           #
# Variables used to configure OAuth 2 authentication for Harmony data users #
#                                                                           #
# To use Earthdata Login, you must first set up a new application using the #
# Earthdata Login UI.                                                       #
# https://wiki.earthdata.nasa.gov/display/EL/How+To+Register+An+Application #
#############################################################################

# Variable            Description                 Example
#--------------------------------------------------------------------------------------
# OAUTH_CLIENT_ID     EDL App Client ID           rCjHBluumLhppiIX5iZxoQ
# OAUTH_UID           EDL App UID                 harmony_kbeam
# OAUTH_PASSWORD      EDL App Password            top_secret
# OAUTH_REDIRECT_URI  Valid EDL App Redirect URL  http://localhost:3000/oauth2/redirect
# OAUTH_HOST          Earthdata Login URL         https://uat.urs.earthdata.nasa.gov

# Notes:
# The OAUTH_REDIRECT_URI needs to be provided verbatim when setting up the
# Earthdata Login app. Each EDL app has a list of valid Redirect URLs, and
# Harmony requires a URI endpoint of "/oauth2/redirect" for all environments.
# When running Harmony locally, for example, add a Redirect URL of
# `http://localhost:3000/oauth2/redirect`. Use HTTPS for non-local instances.
#
# The OAUTH_HOST is used by the Harmony API as well as Harmony services.
# This should be the same EDL environment as used by backend data sources.
# For example, if OAUTH_HOST points to UAT EDL, downloading data from a
# TEA endpoint that's integrated with PROD EDL will fail.

OAUTH_REDIRECT_URI=http://localhost:3000/oauth2/redirect
OAUTH_HOST=https://uat.urs.earthdata.nasa.gov

###########################################################################
#                        Fallback Authentication                          #
###########################################################################

# When using data that cannot accept Earthdata Login tokens from
# Harmony, either because of application group setup or because they
# use a different Earthdata Login endpoint (e.g. Data needs production
# while Harmony and CMR need UAT), these provide a
# minimally-privileged EDL user login for fetching remote data behind
# Earthdata Login. This user should exist in all environments being
# used to fetch data.

# CAUTION: This fallback authentication switch should normally be
# disabled.

# CAUTION: This EDL user should *not* have accepted any EDL
# application EULAs. Doing so can result in users getting data for
# which they have not personally accepted the EULA.

# CAUTION: Enabling this could result in skewed metrics since
# downloads will appear to be done by Harmony--not the actual
# end-user--if the fallback authentication is used (e.g., a backend
# data source doesn't yet support EDL federated tokens).

FALLBACK_AUTHN_ENABLED=false
EDL_USERNAME=
EDL_PASSWORD=

###########################################################################
#                               Test Suite                                #
#                                                                         #
# Settings for altering the behavior of the test suite that are not used  #
# elsewhere in the application.                                           #
###########################################################################

# How to handle fixtures for remote calls in the test suite:
#   record (default): Perform and record new calls.  Replay existing calls.
#   bloody: Perform and record all calls.  Never play back.
#   replay: Always play back.  Throw an error if a call is not recorded.
#   cheat: Play back cached calls.  Perform and do not cache any new calls
REPLAY=record

# True if server logs should be allowed to go to STDOUT.  When false
# (default), they are routed to logs/test.log and suppressed in STDOUT
LOG_STDOUT=false
